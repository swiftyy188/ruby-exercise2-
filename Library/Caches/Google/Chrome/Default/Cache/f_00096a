<!DOCTYPE html>
<html>
<head>
<meta charset='utf-8'>
<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"bam.nr-data.net","errorBeacon":"bam.nr-data.net","licenseKey":"b800a7824c","applicationID":"3203836","transactionName":"cApYEhRXWwkBQxlRREAMUQgLXVkRFx5FWFhE","queueTime":5,"applicationTime":71,"agent":"js-agent.newrelic.com/nr-768.min.js"}</script>
<script type="text/javascript">(window.NREUM||(NREUM={})).loader_config={xpid:"UAAOU15SGwACVFJaBAc="};window.NREUM||(NREUM={}),__nr_require=function(t,e,n){function r(n){if(!e[n]){var o=e[n]={exports:{}};t[n][0].call(o.exports,function(e){var o=t[n][1][e];return r(o||e)},o,o.exports)}return e[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({QJf3ax:[function(t,e){function n(t){function e(e,n,a){t&&t(e,n,a),a||(a={});for(var c=s(e),f=c.length,u=i(a,o,r),d=0;f>d;d++)c[d].apply(u,n);return u}function a(t,e){f[t]=s(t).concat(e)}function s(t){return f[t]||[]}function c(){return n(e)}var f={};return{on:a,emit:e,create:c,listeners:s,_events:f}}function r(){return{}}var o="nr@context",i=t("gos");e.exports=n()},{gos:"7eSDFh"}],ee:[function(t,e){e.exports=t("QJf3ax")},{}],3:[function(t){function e(t){try{i.console&&console.log(t)}catch(e){}}var n,r=t("ee"),o=t(1),i={};try{n=localStorage.getItem("__nr_flags").split(","),console&&"function"==typeof console.log&&(i.console=!0,-1!==n.indexOf("dev")&&(i.dev=!0),-1!==n.indexOf("nr_dev")&&(i.nrDev=!0))}catch(a){}i.nrDev&&r.on("internal-error",function(t){e(t.stack)}),i.dev&&r.on("fn-err",function(t,n,r){e(r.stack)}),i.dev&&(e("NR AGENT IN DEVELOPMENT MODE"),e("flags: "+o(i,function(t){return t}).join(", ")))},{1:20,ee:"QJf3ax"}],4:[function(t){function e(t,e,n,i,s){try{c?c-=1:r("err",[s||new UncaughtException(t,e,n)])}catch(f){try{r("ierr",[f,(new Date).getTime(),!0])}catch(u){}}return"function"==typeof a?a.apply(this,o(arguments)):!1}function UncaughtException(t,e,n){this.message=t||"Uncaught error with no additional information",this.sourceURL=e,this.line=n}function n(t){r("err",[t,(new Date).getTime()])}var r=t("handle"),o=t(6),i=t("ee"),a=window.onerror,s=!1,c=0;t("loader").features.err=!0,t(3),window.onerror=e;try{throw new Error}catch(f){"stack"in f&&(t(4),t(5),"addEventListener"in window&&t(1),window.XMLHttpRequest&&XMLHttpRequest.prototype&&XMLHttpRequest.prototype.addEventListener&&window.XMLHttpRequest&&XMLHttpRequest.prototype&&XMLHttpRequest.prototype.addEventListener&&!/CriOS/.test(navigator.userAgent)&&t(2),s=!0)}i.on("fn-start",function(){s&&(c+=1)}),i.on("fn-err",function(t,e,r){s&&(this.thrown=!0,n(r))}),i.on("fn-end",function(){s&&!this.thrown&&c>0&&(c-=1)}),i.on("internal-error",function(t){r("ierr",[t,(new Date).getTime(),!0])})},{1:5,2:8,3:3,4:7,5:6,6:21,ee:"QJf3ax",handle:"D5DuLP",loader:"G9z0Bl"}],5:[function(t,e){function n(t){i.inPlace(t,["addEventListener","removeEventListener"],"-",r)}function r(t){return t[1]}var o=t("ee").create(),i=t(1)(o),a=t("gos");if(e.exports=o,n(window),"getPrototypeOf"in Object){for(var s=document;s&&!s.hasOwnProperty("addEventListener");)s=Object.getPrototypeOf(s);s&&n(s);for(var c=XMLHttpRequest.prototype;c&&!c.hasOwnProperty("addEventListener");)c=Object.getPrototypeOf(c);c&&n(c)}else XMLHttpRequest.prototype.hasOwnProperty("addEventListener")&&n(XMLHttpRequest.prototype);o.on("addEventListener-start",function(t,e){function n(){return s}if(t[1]){var r=t[1];if("function"==typeof r){var s=a(r,"nr@wrapped",function(){return i(r,"fn-",n,r.name||"anonymous")});this.wrapped=t[1]=s,o.emit("initEventContext",[t,e],this.wrapped)}else"function"==typeof r.handleEvent&&i.inPlace(r,["handleEvent"],"fn-")}}),o.on("removeEventListener-start",function(t){var e=this.wrapped;e&&(t[1]=e)})},{1:22,ee:"QJf3ax",gos:"7eSDFh"}],6:[function(t,e){var n=t("ee").create(),r=t(1)(n);e.exports=n,r.inPlace(window,["requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","msRequestAnimationFrame"],"raf-"),n.on("raf-start",function(t){t[0]=r(t[0],"fn-")})},{1:22,ee:"QJf3ax"}],7:[function(t,e){function n(t,e,n){t[0]=i(t[0],"fn-",null,n)}function r(t,e,n){function r(){return a}this.ctx={};var a={"nr@context":this.ctx};o.emit("initTimerContext",[t,n],a),t[0]=i(t[0],"fn-",r,n)}var o=t("ee").create(),i=t(1)(o);e.exports=o,i.inPlace(window,["setTimeout","setImmediate"],"setTimer-"),i.inPlace(window,["setInterval"],"setInterval-"),i.inPlace(window,["clearTimeout","clearImmediate"],"clearTimeout-"),o.on("setInterval-start",n),o.on("setTimer-start",r)},{1:22,ee:"QJf3ax"}],8:[function(t,e){function n(){f.inPlace(this,p,"fn-",o)}function r(t,e){f.inPlace(e,["onreadystatechange"],"fn-")}function o(t,e){return e}function i(t,e){for(var n in t)e[n]=t[n];return e}var a=t("ee").create(),s=t(1),c=t(2),f=c(a),u=c(s),d=window.XMLHttpRequest,p=["onload","onerror","onabort","onloadstart","onloadend","onprogress","ontimeout"];e.exports=a,window.XMLHttpRequest=function(t){var e=new d(t);try{a.emit("new-xhr",[],e),e.hasOwnProperty("addEventListener")&&u.inPlace(e,["addEventListener","removeEventListener"],"-",o),e.addEventListener("readystatechange",n,!1)}catch(r){try{a.emit("internal-error",[r])}catch(i){}}return e},i(d,XMLHttpRequest),XMLHttpRequest.prototype=d.prototype,f.inPlace(XMLHttpRequest.prototype,["open","send"],"-xhr-",o),a.on("send-xhr-start",r),a.on("open-xhr-start",r)},{1:5,2:22,ee:"QJf3ax"}],9:[function(t){function e(t){var e=this.params,r=this.metrics;if(!this.ended){this.ended=!0;for(var i=0;c>i;i++)t.removeEventListener(s[i],this.listener,!1);if(!e.aborted){if(r.duration=(new Date).getTime()-this.startTime,4===t.readyState){e.status=t.status;var a=t.responseType,f="arraybuffer"===a||"blob"===a||"json"===a?t.response:t.responseText,u=n(f);if(u&&(r.rxSize=u),this.sameOrigin){var d=t.getResponseHeader("X-NewRelic-App-Data");d&&(e.cat=d.split(", ").pop())}}else e.status=0;r.cbTime=this.cbTime,o("xhr",[e,r,this.startTime])}}}function n(t){if("string"==typeof t&&t.length)return t.length;if("object"!=typeof t)return void 0;if("undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer&&t.byteLength)return t.byteLength;if("undefined"!=typeof Blob&&t instanceof Blob&&t.size)return t.size;if("undefined"!=typeof FormData&&t instanceof FormData)return void 0;try{return JSON.stringify(t).length}catch(e){return void 0}}function r(t,e){var n=i(e),r=t.params;r.host=n.hostname+":"+n.port,r.pathname=n.pathname,t.sameOrigin=n.sameOrigin}if(window.XMLHttpRequest&&XMLHttpRequest.prototype&&XMLHttpRequest.prototype.addEventListener&&!/CriOS/.test(navigator.userAgent)){t("loader").features.xhr=!0;var o=t("handle"),i=t(2),a=t("ee"),s=["load","error","abort","timeout"],c=s.length,f=t(1),u=window.XMLHttpRequest;t(4),t(3),a.on("new-xhr",function(){this.totalCbs=0,this.called=0,this.cbTime=0,this.end=e,this.ended=!1,this.xhrGuids={}}),a.on("open-xhr-start",function(t){this.params={method:t[0]},r(this,t[1]),this.metrics={}}),a.on("open-xhr-end",function(t,e){"loader_config"in NREUM&&"xpid"in NREUM.loader_config&&this.sameOrigin&&e.setRequestHeader("X-NewRelic-ID",NREUM.loader_config.xpid)}),a.on("send-xhr-start",function(t,e){var r=this.metrics,o=t[0],i=this;if(r&&o){var f=n(o);f&&(r.txSize=f)}this.startTime=(new Date).getTime(),this.listener=function(t){try{"abort"===t.type&&(i.params.aborted=!0),("load"!==t.type||i.called===i.totalCbs&&(i.onloadCalled||"function"!=typeof e.onload))&&i.end(e)}catch(n){try{a.emit("internal-error",[n])}catch(r){}}};for(var u=0;c>u;u++)e.addEventListener(s[u],this.listener,!1)}),a.on("xhr-cb-time",function(t,e,n){this.cbTime+=t,e?this.onloadCalled=!0:this.called+=1,this.called!==this.totalCbs||!this.onloadCalled&&"function"==typeof n.onload||this.end(n)}),a.on("xhr-load-added",function(t,e){var n=""+f(t)+!!e;this.xhrGuids&&!this.xhrGuids[n]&&(this.xhrGuids[n]=!0,this.totalCbs+=1)}),a.on("xhr-load-removed",function(t,e){var n=""+f(t)+!!e;this.xhrGuids&&this.xhrGuids[n]&&(delete this.xhrGuids[n],this.totalCbs-=1)}),a.on("addEventListener-end",function(t,e){e instanceof u&&"load"===t[0]&&a.emit("xhr-load-added",[t[1],t[2]],e)}),a.on("removeEventListener-end",function(t,e){e instanceof u&&"load"===t[0]&&a.emit("xhr-load-removed",[t[1],t[2]],e)}),a.on("fn-start",function(t,e,n){e instanceof u&&("onload"===n&&(this.onload=!0),("load"===(t[0]&&t[0].type)||this.onload)&&(this.xhrCbStart=(new Date).getTime()))}),a.on("fn-end",function(t,e){this.xhrCbStart&&a.emit("xhr-cb-time",[(new Date).getTime()-this.xhrCbStart,this.onload,e],e)})}},{1:"XL7HBI",2:10,3:8,4:5,ee:"QJf3ax",handle:"D5DuLP",loader:"G9z0Bl"}],10:[function(t,e){e.exports=function(t){var e=document.createElement("a"),n=window.location,r={};e.href=t,r.port=e.port;var o=e.href.split("://");return!r.port&&o[1]&&(r.port=o[1].split("/")[0].split("@").pop().split(":")[1]),r.port&&"0"!==r.port||(r.port="https"===o[0]?"443":"80"),r.hostname=e.hostname||n.hostname,r.pathname=e.pathname,r.protocol=o[0],"/"!==r.pathname.charAt(0)&&(r.pathname="/"+r.pathname),r.sameOrigin=!e.hostname||e.hostname===document.domain&&e.port===n.port&&e.protocol===n.protocol,r}},{}],11:[function(t,e){function n(t){return function(){r(t,[(new Date).getTime()].concat(i(arguments)))}}var r=t("handle"),o=t(1),i=t(2);"undefined"==typeof window.newrelic&&(newrelic=window.NREUM);var a=["setPageViewName","addPageAction","setCustomAttribute","finished","addToTrace","inlineHit","noticeError"];o(a,function(t,e){window.NREUM[e]=n("api-"+e)}),e.exports=window.NREUM},{1:20,2:21,handle:"D5DuLP"}],gos:[function(t,e){e.exports=t("7eSDFh")},{}],"7eSDFh":[function(t,e){function n(t,e,n){if(r.call(t,e))return t[e];var o=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(t,e,{value:o,writable:!0,enumerable:!1}),o}catch(i){}return t[e]=o,o}var r=Object.prototype.hasOwnProperty;e.exports=n},{}],D5DuLP:[function(t,e){function n(t,e,n){return r.listeners(t).length?r.emit(t,e,n):void(r.q&&(r.q[t]||(r.q[t]=[]),r.q[t].push(e)))}var r=t("ee").create();e.exports=n,n.ee=r,r.q={}},{ee:"QJf3ax"}],handle:[function(t,e){e.exports=t("D5DuLP")},{}],XL7HBI:[function(t,e){function n(t){var e=typeof t;return!t||"object"!==e&&"function"!==e?-1:t===window?0:i(t,o,function(){return r++})}var r=1,o="nr@id",i=t("gos");e.exports=n},{gos:"7eSDFh"}],id:[function(t,e){e.exports=t("XL7HBI")},{}],G9z0Bl:[function(t,e){function n(){var t=p.info=NREUM.info,e=f.getElementsByTagName("script")[0];if(t&&t.licenseKey&&t.applicationID&&e){s(d,function(e,n){e in t||(t[e]=n)});var n="https"===u.split(":")[0]||t.sslForHttp;p.proto=n?"https://":"http://",a("mark",["onload",i()]);var r=f.createElement("script");r.src=p.proto+t.agent,e.parentNode.insertBefore(r,e)}}function r(){"complete"===f.readyState&&o()}function o(){a("mark",["domContent",i()])}function i(){return(new Date).getTime()}var a=t("handle"),s=t(1),c=window,f=c.document;t(2);var u=(""+location).split("?")[0],d={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-768.min.js"},p=e.exports={offset:i(),origin:u,features:{}};f.addEventListener?(f.addEventListener("DOMContentLoaded",o,!1),c.addEventListener("load",n,!1)):(f.attachEvent("onreadystatechange",r),c.attachEvent("onload",n)),a("mark",["firstbyte",i()])},{1:20,2:11,handle:"D5DuLP"}],loader:[function(t,e){e.exports=t("G9z0Bl")},{}],20:[function(t,e){function n(t,e){var n=[],o="",i=0;for(o in t)r.call(t,o)&&(n[i]=e(o,t[o]),i+=1);return n}var r=Object.prototype.hasOwnProperty;e.exports=n},{}],21:[function(t,e){function n(t,e,n){e||(e=0),"undefined"==typeof n&&(n=t?t.length:0);for(var r=-1,o=n-e||0,i=Array(0>o?0:o);++r<o;)i[r]=t[e+r];return i}e.exports=n},{}],22:[function(t,e){function n(t){return!(t&&"function"==typeof t&&t.apply&&!t[i])}var r=t("ee"),o=t(1),i="nr@original",a=Object.prototype.hasOwnProperty;e.exports=function(t){function e(t,e,r,a){function nrWrapper(){var n,i,s,f;try{i=this,n=o(arguments),s=r&&r(n,i)||{}}catch(d){u([d,"",[n,i,a],s])}c(e+"start",[n,i,a],s);try{return f=t.apply(i,n)}catch(p){throw c(e+"err",[n,i,p],s),p}finally{c(e+"end",[n,i,f],s)}}return n(t)?t:(e||(e=""),nrWrapper[i]=t,f(t,nrWrapper),nrWrapper)}function s(t,r,o,i){o||(o="");var a,s,c,f="-"===o.charAt(0);for(c=0;c<r.length;c++)s=r[c],a=t[s],n(a)||(t[s]=e(a,f?s+o:o,i,s))}function c(e,n,r){try{t.emit(e,n,r)}catch(o){u([o,e,n,r])}}function f(t,e){if(Object.defineProperty&&Object.keys)try{var n=Object.keys(t);return n.forEach(function(n){Object.defineProperty(e,n,{get:function(){return t[n]},set:function(e){return t[n]=e,e}})}),e}catch(r){u([r])}for(var o in t)a.call(t,o)&&(e[o]=t[o]);return e}function u(e){try{t.emit("internal-error",e)}catch(n){}}return t||(t=r),e.inPlace=s,e.flag=i,e}},{1:21,ee:"QJf3ax"}]},{},["G9z0Bl",4,9]);</script>
<title>Platform</title>
<meta content='width=device-width,initial-scale=1.0' name='viewport'>
<link rel="shortcut icon" type="image/x-icon" href="/assets/favicon-617cee3b03bb02f27b8e804468564d20b6076bcfb2efaa7ff789669d68ee57fe.ico" />
<link rel="stylesheet" media="all" href="/assets/application-855a9d0044b0a1bf30c7d49464659ae127e54a9ae6f5a62201dc6165acbd7dc8.css" data-turbolinks-track="true" />
<script src="/assets/application-c410072ec466b91f8eec2d5f8a0ebd8a224193325ed98e7fce2c27d81710e31f.js" data-turbolinks-track="true"></script>
<meta name="csrf-param" content="authenticity_token" />
<meta name="csrf-token" content="wVTdyXoWX5tgNov44i3UJFdhUCaSfpbaJnWmSc3hqmT2eHqObBElRM9eFpycso/oiZItVnk3pwR1xBmxMlvADQ==" />
</head>
<body>
<div class='div hidden' data-course='webdevelopment'></div>
<div class='side-nav'>
<div class='side-nav-border first-half hide-for-medium hide-for-small'></div>
<div class='logo center'>
<a href="/weeks/current"></a>
</div>
<ul class='side-nav-menu large-7 medium-36 small-36'>
<div class='side-nav-border second-half hide-for-medium hide-for-small'></div>
<li class='is-active side-nav-link' data-submenu='curriculum'>
<div class='icon'>
<i class='fa fa-file-text'></i>
</div>
<span>Curriculum</span>
</li>
<li class='side-nav-link' data-submenu='people'>
<div class='icon'>
<i class='fa fa-group'></i>
</div>
<span>Users</span>
</li>
<li>
<a href="/events"><div class='icon'>
<i class='fa fa-calendar'></i>
</div>
<span>Events</span>
</a></li>
<li class='side-nav-link' data-submenu='hiring_board'>
<div class='icon'>
<i class='fa fa-suitcase'></i>
</div>
<span>Hiring Board</span>
</li>
<li>
<a target="_blank" href="/tickets"><div class='icon'>
<i class='fa fa-stack-exchange'></i>
</div>
<span>Que</span>
</a></li>
<li class='unlock'>
<a href="/cohorts/37/breakouts"><div class='icon'>
<i class='fa fa-lock'></i>
</div>
<span>Breakouts</span>
</a></li>
<li class='side-nav-link nav' data-submenu='nav'>
<div class='icon'>
<i class='fa fa-user'></i>
</div>
<span>Jeff Ho</span>
</li>
</ul>
<div class='side-nav-submenu-close'>
<i class='fa fa-caret-left'></i>
</div>
<!-- the class .curriculum is needed in sidenav.js -->
<ul class='side-nav-submenu curriculum'>
<li><a href="/cohorts/37/assignments">Assignments</a></li>
<li><a href="/cohorts/37/lessons">Lessons</a></li>
<li><a href="/cohorts/37/quizzes">Quizzes</a></li>
</ul>
<!-- the class .people is needed in sidenav.js -->
<ul class='side-nav-submenu people'>
<li><a href="/cohorts/37/students">Students</a></li>
<li class='submenu-link-indent'><a href="/cohorts/37/progress">Progress</a></li>
<li><a href="/staffs">Staff</a></li>
</ul>
<ul class='side-nav-submenu hiring_board'>
<li><a target="_blank" href="/hiring_board/job_postings">Job Postings</a></li>
<li><a target="_blank" href="/hiring_board/companies">Companies</a></li>
<li><a target="_blank" href="/hiring_board/hiring_boards">More Jobs!</a></li>
<li><a target="_blank" href="/hiring_board/students">Students</a></li>
</ul>
<!-- the class .nav is needed in sidenav.js -->
<ul class='side-nav-submenu nav'>
<li>Courses</li>
<li class='submenu-course submenu-browsing-course'>
<i class='fa fa-circle small-fa'></i>
Web Development
</li>
<li><a href="/students/jeff-ho/edit">Edit Profile</a></li>
<li><a data-no-turbolink="" href="/logout">Log Out</a></li>
</ul>

</div>

<main class='wrap medium-offset-0 large-offset-7 relative small-offset-0'>
<div class='assignment-header clearfix'>
<h1 class='assignment-name'>
Ruby Fundamentals: Part One
</h1>
<div class='assignment-header-links'>
<div class='tab-links'>
<a class="tab-link is-active" href="/cohorts/37/assignments/987"><span>Article</span>
</a><a class="tab-link" href="/cohorts/37/assignments/987/submissions"><span>Submissions</span>
</a></div>
<div class='buttons'>
</div>
</div>
</div>
<article>
<div class='markdown'>
<h3 id="submitting">Submitting</h3>&#x000A;&#x000A;<p>Create a git repository on GitHub, called &quot;ruby_fundamentals1&quot; or similar. Clone it onto your own computer. The assignment will walk you through creating Ruby programs and adding those files to the repository.</p>&#x000A;&#x000A;<p>Have fun and don&#39;t forget to work alongside a partner!</p>&#x000A;&#x000A;<h2 id="what-you-will-learn">What You Will Learn</h2>&#x000A;&#x000A;<p>This assignment will teach you the fundamental building blocks of Ruby.</p>&#x000A;&#x000A;<h1 id="assignment">Assignment</h1>&#x000A;&#x000A;<ol>&#x000A;<li><a href="#introduction">Introduction</a>: <a href="#exercise-1">Exercise 1</a></li>&#x000A;<li><a href="#basic-data-types">Basic Data Types</a>: <a href="exercise-2">Exercise 2</a></li>&#x000A;<li><a href="#variables-and-assignment">Variables and Assignment</a>: <a href="#exercise-3">Exercise 3</a></li>&#x000A;<li><a href="#control-structures">Control Structures</a>: <a href="#exercise-4">Exercise 4</a></li>&#x000A;</ol>&#x000A;&#x000A;<h2 id="this-assignment">This Assignment</h2>&#x000A;&#x000A;<h3 id="prerequisites">Prerequisites</h3>&#x000A;&#x000A;<ul>&#x000A;<li>Be comfortable using your <a href="http://cli.learncodethehardway.org/book/">command-line interface</a></li>&#x000A;<li>Be comfortable using <a href="http://rogerdudler.github.io/git-guid">git</a> and <a href="http://github.com">GitHub</a></li>&#x000A;<li>Have Ruby installed on your computer: in your command-line interface (aka shell), if typing <code>ruby -v</code> returns an error, Ruby is not installed. Otherwise, you&#39;re good to go!</li>&#x000A;<li>Have a <a href="http://www.sublimetext.com/">text editor</a></li>&#x000A;</ul>&#x000A;&#x000A;<h1 id="introduction">Introduction</h1>&#x000A;&#x000A;<h2 id="programming-languages">Programming Languages</h2>&#x000A;&#x000A;<p>Ruby is a programming language, and like every other programming language, you can use it to command your computer. There exists a very wide range of programming languages and many are tailored to work best in specific domains.</p>&#x000A;&#x000A;<p>Perhaps you&#39;ve heard of some other popular programming languages, such as <strong>Java</strong>, <strong>C++</strong>, <strong>Python</strong>, <strong>Objective-C</strong>, or <strong>JavaScript</strong>?</p>&#x000A;&#x000A;<p>Programming languages all have their own special syntaxes, rules, and paradigms, each having their own pros and cons.</p>&#x000A;&#x000A;<p><strong>Yukihiro Matsumoto</strong> aka <strong>Matz</strong> released Ruby in 1995 and says &quot;I hope to see Ruby help every programmer in the world to be productive, and to enjoy programming, and to be happy. That is the primary purpose of Ruby language.&quot;</p>&#x000A;&#x000A;<p>In recent years, Ruby has grown in popularity for building web applications, largely due to the creation of Ruby on Rails or simply <strong>Rails</strong>. Rails is a <strong>web framework</strong> and not a programming language, it&#39;s a collection of Ruby libraries that help when building web applications. However, Ruby is great on its own and provides an easily-readable programming language that can be very versatile.</p>&#x000A;&#x000A;<h2 id="running-ruby-programs">Running Ruby Programs</h2>&#x000A;&#x000A;<p>Typically, when building Ruby programs, programmers work with their code editor and they save their Ruby code to one or more files. The file extension used to indicate that a file is a Ruby program is <strong>.rb</strong></p>&#x000A;&#x000A;<p>To &quot;run&quot; the program in a file called <strong>first.rb</strong>, run this in your command-line interface (CLI)</p>&#x000A;&#x000A;<p><code>ruby first.rb</code></p>&#x000A;&#x000A;<p>This will run the program, output any results and return to the command prompt when it&#39;s done.</p>&#x000A;&#x000A;<p><img src="http://cl.ly/image/3I0F2W1T331K/Screen%20Shot%202013-10-18%20at%208.16.17%20AM.png" alt=""></p>&#x000A;&#x000A;<p>If there are any errors, the output would look something like this</p>&#x000A;&#x000A;<p><img src="http://cl.ly/image/0O0y0J1J1S0f/Screen%20Shot%202013-10-18%20at%208.17.31%20AM.png" alt=""></p>&#x000A;&#x000A;<h2 id="exercise-1">Exercise 1</h2>&#x000A;&#x000A;<h3 id="try-out-a-ruby-file">Try Out a Ruby File</h3>&#x000A;&#x000A;<p>Create a file called <code>exercise1.rb</code> and open it in a text editor like Sublime. Write the code</p>&#x000A;&#x000A;<pre><code class="ruby">2 != 3&#x000A;</code></pre>&#x000A;&#x000A;<p>and save the file. Now, let&#39;s run the file by typing in your shell:</p>&#x000A;&#x000A;<p><code>ruby exercise1.rb</code></p>&#x000A;&#x000A;<p>Nothing happened, right? Let&#39;s try something else.</p>&#x000A;&#x000A;<p>When we run a Ruby file, we have to explicitly tell it to output something. Let&#39;s edit our file and change it to be</p>&#x000A;&#x000A;<pre><code class="ruby">puts 2 != 3&#x000A;</code></pre>&#x000A;&#x000A;<p>and run <code>ruby exercise1.rb</code> again.</p>&#x000A;&#x000A;<p>Did your first program output <code>true</code>?</p>&#x000A;&#x000A;<p><code>puts</code> is a Ruby method. We&#39;ll revisit <a href="5_methods.md">methods</a> in greater detail later on. Lets add some more lines at the beginning of our program so it looks like the following, and then go ahead and run it:</p>&#x000A;&#x000A;<pre><code class="ruby">puts 2&#x000A;puts 3&#x000A;puts 2 != 3&#x000A;</code></pre>&#x000A;&#x000A;<p>We have just created and run our first multi-line Ruby program. As you can see, we have put each Ruby statement on its own line. Try putting everything on the same line and running it again, with the file like so:</p>&#x000A;&#x000A;<pre><code class="ruby">puts 2 puts 3 puts 2 != 3&#x000A;</code></pre>&#x000A;&#x000A;<p>Oh no...</p>&#x000A;&#x000A;<pre><code>exercise1.rb:1: syntax error, unexpected tIDENTIFIER, expecting $end&#x000A;puts(2) puts(3) puts(2 != 3)&#x000A;            ^&#x000A;</code></pre>&#x000A;&#x000A;<p>We got an error. Ruby couldn&#39;t understand our program with every statement on the same line. There&#39;s no need to panic, it&#39;s just Ruby telling us what is wrong. We can simply reopen the file, and put it back the way it was. Run it once again to confirm that it is now fixed.</p>&#x000A;&#x000A;<p>Now that you have written a working program in Ruby, make sure to commit it to git. It will look something like the following. Remember to run <code>git status</code> after every other git command to make sure the status is what you expect it to be. Feel free to review the <a href="https://github.com/bitmakerlabs/resources/blob/master/submitting_your_work.md">Github cheat sheet</a> at any time.</p>&#x000A;&#x000A;<h2 id="irb">irb</h2>&#x000A;&#x000A;<p>irb aka Interactive Ruby, is a program that runs within the shell that allows you to run</p>&#x000A;&#x000A;<p>Run the command <code>irb</code> to start it within your shell:</p>&#x000A;&#x000A;<p><img src="http://cl.ly/image/3S2m310K3m3j/Screen%20Shot%202013-10-18%20at%202.30.31%20AM.png" alt="!irb from the shell"></p>&#x000A;&#x000A;<p>Now you can type in some code and IRB will automatically output the result of that code. As an overly-simple example, type in <code>1</code> and run that. IRB will tell you <code>1</code> right back. We will get to more useful examples shortly.</p>&#x000A;&#x000A;<p>You can type <code>exit</code> at any time to return back to your original shell.</p>&#x000A;&#x000A;<h3 id="try-out-irb">Try out irb</h3>&#x000A;&#x000A;<p>Start irb and try running each of these commands, one at a time. It&#39;s best to type them out and not to copy+paste, you&#39;ll learn much more that way.</p>&#x000A;&#x000A;<p><code>1</code></p>&#x000A;&#x000A;<p><code>5</code></p>&#x000A;&#x000A;<p><code>5 + 1</code></p>&#x000A;&#x000A;<p><code>5+1</code></p>&#x000A;&#x000A;<p><code>5+     1</code></p>&#x000A;&#x000A;<p>As you can see, Ruby can do math. Also, Ruby (generally) doesn&#39;t care that much about spaces. <strong>Whitespace</strong> refers to spaces, tabs, and blank lines, and they don&#39;t really matter in Ruby. Try out some more commands:</p>&#x000A;&#x000A;<p><code>3 + 7 + 1</code></p>&#x000A;&#x000A;<p><code>5 * 3</code></p>&#x000A;&#x000A;<p><code>5 * 3 # muliplication uses the asterisk (*) operator, not the letter x</code></p>&#x000A;&#x000A;<p>What was that? If you use a pound/number sign (#), Ruby ignores everything after that on the same line. So you can (and should) use it to write useful comments alongside your code. This will make it easy for you when you go back later and try to read your code and understand what it does. It also makes it easier for other people trying to read your code.</p>&#x000A;&#x000A;<p>Keep experimenting and trying new Ruby code in irb all the time, it&#39;s a great tool to learn and discover.</p>&#x000A;&#x000A;<h1 id="basic-data-types">Basic Data Types</h1>&#x000A;&#x000A;<p>Data types allow us to represent different kinds of data. In programming, different data types have different functionality. Let&#39;s look at some basic Ruby data types.</p>&#x000A;&#x000A;<h2 id="numbers">Numbers</h2>&#x000A;&#x000A;<p>Numbers without decimal points are called <strong>integers</strong>, and numbers with decimal points are usually called floating-point numbers or, more simply, <strong>floats</strong> (you must place at least one digit before the decimal point).</p>&#x000A;&#x000A;<p>Doing operations with Ruby and numbers is simple. Fire up <code>irb</code> in your shell and try out the following:</p>&#x000A;&#x000A;<p><code>5 &gt; 3</code></p>&#x000A;&#x000A;<p><code>5 &lt; 3</code></p>&#x000A;&#x000A;<p><code>5 &gt; 5</code></p>&#x000A;&#x000A;<p><code>5 &gt;= 5</code></p>&#x000A;&#x000A;<p><code>2 == 2 # note: two equal symbols, not one</code></p>&#x000A;&#x000A;<p><code>2 == 3</code></p>&#x000A;&#x000A;<p><code>2 != 3</code></p>&#x000A;&#x000A;<p>Ruby has <strong>arithmetic operators</strong> such as <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>,  and <strong>comparison operators</strong> such as <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>, <code>==</code> and <code>!=</code> (not equal). You must <em>always</em> use <em>two</em> equal signs when doing a comparison.  Here&#39;s a good list of <a href="http://www.tutorialspoint.com/ruby/ruby_operators.htm">Ruby operators</a> of all types. Some of these haven&#39;t been covered yet, but feel free to try them out in <strong>irb</strong>.</p>&#x000A;&#x000A;<h2 id="strings">Strings</h2>&#x000A;&#x000A;<p>String literals are sequences of characters between single quotation marks. You can create a new string by adding two strings together in Ruby, just like most other languages.</p>&#x000A;&#x000A;<p>a. If <strong>puts</strong> is passed an object that is not a string, puts calls the &quot;.to_s&quot; method of that object and prints the string returned by that method.</p>&#x000A;&#x000A;<p>b. In Ruby, strings are <strong>mutable</strong>. They can expand as needed, without using much time and memory. Ruby stores a string as a sequence of characters.</p>&#x000A;&#x000A;<h3 id="string-literals">String Literals</h3>&#x000A;&#x000A;<p>One way to create a String is to use single or double quotes inside a Ruby program to create what is called a string literal. We&#39;ve already done this with our &quot;hello world&quot; program. A quick update to our code shows the use of both single and double quotes.</p>&#x000A;&#x000A;<pre><code class="ruby">puts &#39;Hello world&#39;&#x000A;puts &quot;Hello world&quot;&#x000A;</code></pre>&#x000A;&#x000A;<p>So what difference is there between single quotes and double quotes in Ruby? In the above code, there&#39;s no difference. However, consider the following code:</p>&#x000A;&#x000A;<pre><code class="ruby">puts &quot;Betty&#39;s pie shop&quot;&#x000A;puts &#39;Betty\&#39;s pie shop&#39;&#x000A;</code></pre>&#x000A;&#x000A;<p>Because &quot;Betty&#39;s&quot; contains an apostrophe, which is the same character as the single quote, in the second line we need to use a backslash to escape the apostrophe so that Ruby understands that the apostrophe is in the string literal instead of marking the end of the string literal. The backslash followed by the single quote is called an escape sequence.</p>&#x000A;&#x000A;<h3 id="single-quotes">Single Quotes</h3>&#x000A;&#x000A;<p>Single quotes only support two escape sequences.</p>&#x000A;&#x000A;<p>\&#39; – single quote&#x000A;\ – single backslash</p>&#x000A;&#x000A;<p>Except for these two escape sequences, everything else between single quotes is treated literally.</p>&#x000A;&#x000A;<h3 id="double-quotes">Double Quotes</h3>&#x000A;&#x000A;<p>Double quotes allow for many more escape sequences than single quotes. They also allow you to embed variables or Ruby code inside of a string literal – this is commonly referred to as interpolation.</p>&#x000A;&#x000A;<pre><code class="ruby">puts &quot;Enter name&quot;&#x000A;name = gets.chomp&#x000A;puts &quot;Your name is #{name}&quot;&#x000A;</code></pre>&#x000A;&#x000A;<h3 id="string-interpolation-(revisit-after-variables-section)">String Interpolation (revisit after Variables section)</h3>&#x000A;&#x000A;<p>Expression substitution is a means of embedding the value of any Ruby expression into a string using #{and}:</p>&#x000A;&#x000A;<pre><code class="ruby">a = 20&#x000A;b = 65&#x000A;puts &quot;The value of a is #{a}.&quot; # The value of a is 20.&#x000A;puts &quot;The value of a is #{b}.&quot; # The value of a is 65.&#x000A;puts &quot;The value of a plus b is #{a + b}.&quot; # The value of a plus b is 85.&#x000A;</code></pre>&#x000A;&#x000A;<h3 id="escape-sequences">Escape Sequences</h3>&#x000A;&#x000A;<p>Below are some of the more common escape sequences that can appear inside of double quotes.</p>&#x000A;&#x000A;<p>\&quot; – double quote&#x000A;\ – single backslash&#x000A;\a – bell/alert&#x000A;\b – backspace&#x000A;\r – carriage return&#x000A;\n – newline&#x000A;\s – space&#x000A;\t – tab</p>&#x000A;&#x000A;<p>Try out this example code to better understand escape sequences.</p>&#x000A;&#x000A;<pre><code class="ruby">puts &quot;Hello\t\tworld&quot;&#x000A;puts &quot;Hello\b\b\b\b\bGoodbye world&quot;&#x000A;puts &quot;Hello\rStart over world&quot;&#x000A;puts &quot;1. Hello\n2. World&quot;&#x000A;</code></pre>&#x000A;&#x000A;<p>Strings can also work with some arithmetic operators and comparison operators. Try a few irb to see what works and what doesn&#39;t.</p>&#x000A;&#x000A;<h2 id="booleans">Booleans</h2>&#x000A;&#x000A;<p>In Ruby, boolean data types allow us to represent <strong>true</strong> and <strong>false</strong>. Boolean expressions are very common in programming and allow computers to evaluate conditions as being one or the other: true or false.</p>&#x000A;&#x000A;<p>Boolean expressions work with <strong>logical operators</strong>. Try these for yourself in irb:</p>&#x000A;&#x000A;<p><img src="http://cl.ly/image/3e0F3O28191t/Screen%20Shot%202013-10-20%20at%207.32.53%20PM.png" alt=""></p>&#x000A;&#x000A;<h2 id="symbols">Symbols</h2>&#x000A;&#x000A;<p>Symbols are similar to strings, but have much more limited behaviour. They&#39;re represented by a word with a colon in front it, such as</p>&#x000A;&#x000A;<p><code>:bitmaker</code></p>&#x000A;&#x000A;<p>Unlike strings, once a symbol has been initialized, every time it is used, it refers to the same object in memory. Try this example in irb:</p>&#x000A;&#x000A;<p><img src="http://cl.ly/image/0l0q0d0H1F0x/Screen%20Shot%202013-10-20%20at%2010.56.36%20PM.png" alt=""></p>&#x000A;&#x000A;<p>One advantage of this is that is saves memory if a particular String would be used multiple times in a program.</p>&#x000A;&#x000A;<h2 id="exercise-2">Exercise 2</h2>&#x000A;&#x000A;<p>Create a file called <code>exercise2.rb</code> and in it enter the solution for the 4 problems below, then <a href="github.md">check it into github</a>.&#x000A;Try leaving a comment in the file, right above each code snippet you provide.</p>&#x000A;&#x000A;<ol>&#x000A;<li>How would you calculate a good tip for a 55 dollar meal? Use <code>puts</code> to print the answer onscreen.</li>&#x000A;<li>Try adding a string and an integer. What happens? Find a way to convert the integer so that it works and use <code>puts</code> to print the answer onscreen.</li>&#x000A;<li>Evidently, Ruby is much more than just a calculator, but try outputting the result of 45628 multiplied by 7839 in a sentence by using string interpolation.</li>&#x000A;<li>What&#39;s the value of the expression <code>(true &amp;&amp; false) || (false &amp;&amp; true) || !(false &amp;&amp; false)</code>? Try figuring it out on your own before typing it in.</li>&#x000A;</ol>&#x000A;&#x000A;<h1 id="variables-and-assignment">Variables and Assignment</h1>&#x000A;&#x000A;<p>To store a number or a string in your computer&#39;s memory for use later in your program, you need to give the number or string a name. Programmers often refer to this process as assignment and they call the names variables. A variable springs into existence as soon as the interpreter sees an assignment to that variable.</p>&#x000A;&#x000A;<pre><code class="ruby">myvar = &#39;myvar is now this string&#39;&#x000A;myvar # myvar is now this string&#x000A;</code></pre>&#x000A;&#x000A;<p>It&#39;s best to think of variable assignment in Ruby as a pointer, the myvar variable is pointing to the &quot;myvar is now this string&quot;. We have to point it at something else for it to be reassigned. See the below example to understand how Ruby deals with assignment, try it in irb:</p>&#x000A;&#x000A;<pre><code class="ruby">amount = 20&#x000A;new_amount = amount&#x000A;new_amount # 20&#x000A;amount = &quot;twenty&quot;&#x000A;amount # &quot;twenty&quot;&#x000A;new_amount # 20&#x000A;</code></pre>&#x000A;&#x000A;<p>You can also assign multiple variables in a single line:</p>&#x000A;&#x000A;<pre><code class="ruby">first_amount, second_amount, third_amount = 10, 20, 30&#x000A;first_amount # 10&#x000A;second_amount # 20&#x000A;third_amount # 30&#x000A;</code></pre>&#x000A;&#x000A;<h2 id="operator-and-assignment-shorthand">Operator and Assignment Shorthand</h2>&#x000A;&#x000A;<p>Programmers are lazy. If we can type less we will. Combining operators and assignment is one of the most commonly used shortcuts. For example:</p>&#x000A;&#x000A;<pre><code class="ruby">counter = counter + 1&#x000A;</code></pre>&#x000A;&#x000A;<p>is the same as</p>&#x000A;&#x000A;<pre><code class="ruby">counter += 1&#x000A;</code></pre>&#x000A;&#x000A;<h3 id="+=-and--=">+= and -=</h3>&#x000A;&#x000A;<p>&quot;+=&quot; is the add AND assignment operator. It adds right operand to the left operand and assign the result to left operand.</p>&#x000A;&#x000A;<p>&quot;-=&quot; is the subtract AND assignment operator, It subtracts right operand from the left operand and assign the result to left operand.</p>&#x000A;&#x000A;<pre><code class="ruby">amount = 30&#x000A;amount -= 5&#x000A;amount # 25&#x000A;amount += 7&#x000A;amount # 32&#x000A;</code></pre>&#x000A;&#x000A;<h3 id="||=">||=</h3>&#x000A;&#x000A;<p>A common practice is to use || to assign a value to a variable only if that variable isn&#39;t already set. This can be written as:</p>&#x000A;&#x000A;<pre><code class="ruby">variable # undefined local variable or method &#39;variable for main:Object&#39;&#x000A;variable = variable || &quot;default value&quot;&#x000A;</code></pre>&#x000A;&#x000A;<p>or, more commonly, as:</p>&#x000A;&#x000A;<pre><code class="ruby">variable ||= &quot;default value&quot;&#x000A;</code></pre>&#x000A;&#x000A;<h2 id="exercise-3">Exercise 3</h2>&#x000A;&#x000A;<p>Let&#39;s make a tiny Ruby program that greets someone by name. Let&#39;s call it <strong>exercise3.rb</strong>.</p>&#x000A;&#x000A;<p>Let&#39;s start with outputting a question:</p>&#x000A;&#x000A;<pre><code class="ruby">puts &quot;What is your name?&quot;&#x000A;</code></pre>&#x000A;&#x000A;<p>Run your program to see if that works so far. If it works, commit what you&#39;ve got to git. Try making your git commit message as meaningful as possible.</p>&#x000A;&#x000A;<p>The next step would be to get the user&#39;s input. We can do that with the <strong>gets</strong> method, this method will return the value entered by your user. In order for us to be able to reuse that value to redisplay it later, we&#39;ll need to assign it to a variable.</p>&#x000A;&#x000A;<p>You maybe have also seen <code>gets.chomp</code> or <code>gets.strip</code>. These methods allow you to clean up your data of any extra whitespace the user may have entered.</p>&#x000A;&#x000A;<p>Once you&#39;ve assigned the user&#39;s input to the variable <code>name</code>, you want to display it back to them in the form of a greeting, using string interpolation.</p>&#x000A;&#x000A;<pre><code class="ruby">puts &quot;Hi #{name}!&quot;&#x000A;</code></pre>&#x000A;&#x000A;<p>Since you&#39;ve now got a basic working program, you should commit your work again.</p>&#x000A;&#x000A;<p>For the last step, try asking your user how old they are and have your program output what year they were born in.</p>&#x000A;&#x000A;<p><strong>PROTIP</strong>: Keep an eye out to ensure you have the proper data type, you might want to convert your string when doing a mathematical operation to ensure you have a number by using <a href="http://ruby-doc.org/core-2.0.0/String.html#method-i-to_i"><strong>to_i</strong></a>.</p>&#x000A;&#x000A;<h1 id="control-structures">Control Structures</h1>&#x000A;&#x000A;<p>Control structures allows you to selectively execute certain blocks of code based on a given condition. They also allow you to run loops, so that we can repeat blocks one or more times.</p>&#x000A;&#x000A;<h2 id="if">if</h2>&#x000A;&#x000A;<p>Ruby includes an if statement that can be used to manage a program&#39;s control flow. The statement takes a boolean expression and executes certain code depending on whether that expression evaluates to true or false. The syntax looks like this:</p>&#x000A;&#x000A;<pre><code class="ruby">if true&#x000A;  puts &quot;I get printed!&quot;&#x000A;end&#x000A;I get printed!&#x000A;</code></pre>&#x000A;&#x000A;<h2 id="else">else</h2>&#x000A;&#x000A;<p>If you want to provide two options for your if statement—that is, &quot;do this thing or else do this other thing&quot;—you can include an else statement, which works like so:</p>&#x000A;&#x000A;<pre><code class="ruby">x = 3&#x000A;y = -4&#x000A;def check_sign(number)&#x000A;  if number &gt; 0&#x000A;    &quot;#{number} is positive&quot;&#x000A;  else&#x000A;    &quot;#{number} is negative&quot;&#x000A;  end&#x000A;end&#x000A;&#x000A;check_sign(x) # 3 is positive&#x000A;check_sign(y) # -4 is negative&#x000A;</code></pre>&#x000A;&#x000A;<h2 id="elsif">elsif</h2>&#x000A;&#x000A;<p>You can add additional branches to your if/else statement using elsif:</p>&#x000A;&#x000A;<pre><code class="ruby">x = 3&#x000A;y = 4&#x000A;if x &gt; y&#x000A;  puts &quot;x is greater than y!&quot;&#x000A;elsif x &lt; y&#x000A;  puts &quot;x is less than y!&quot;&#x000A;else&#x000A;  puts &quot;x equals y!&quot;&#x000A;end&#x000A;&#x000A;x is less than y!&#x000A;</code></pre>&#x000A;&#x000A;<h2 id="unless">unless</h2>&#x000A;&#x000A;<p>You may find yourself expecting a boolean expression to be false rather than true. Instead of writing</p>&#x000A;&#x000A;<pre><code class="ruby">if x != 10&#x000A;  puts &quot;I get printed!&quot;&#x000A;end&#x000A;You can instead use unless, which is equivalent to &quot;if not&quot;:&#x000A;&#x000A;unless x == 10&#x000A;  puts &quot;I get printed!&quot;&#x000A;end&#x000A;I get printed!&#x000A;</code></pre>&#x000A;&#x000A;<h1 id="loops">Loops</h1>&#x000A;&#x000A;<p>Ruby includes a while loop that will execute a block of code as long as its condition is met.</p>&#x000A;&#x000A;<h2 id="while">while</h2>&#x000A;&#x000A;<pre><code class="ruby">while true&#x000A;  puts &quot;I&#39;m an infinite loop!&quot;&#x000A;end&#x000A;counter = 1&#x000A;&#x000A;while counter &lt; 4&#x000A;  puts &quot;Counter currently at #{counter}.&quot;&#x000A;  counter += 1 # Increment the counter&#x000A;end&#x000A;Counter currently at 1.&#x000A;Counter currently at 2.&#x000A;Counter currently at 3.&#x000A;</code></pre>&#x000A;&#x000A;<h2 id="until">until</h2>&#x000A;&#x000A;<p>You may also want to have a loop execute while the boolean condition it checks is false. In this case, you can use an until loop, which is equivalent to &quot;while not&quot;:</p>&#x000A;&#x000A;<pre><code class="ruby">counter = 3&#x000A;&#x000A;until counter == 0&#x000A;  puts &quot;Counter currently at #{counter}.&quot;&#x000A;  counter -= 1&#x000A;end&#x000A;Counter currently at 3.&#x000A;Counter currently at 2.&#x000A;Counter currently at 1.&#x000A;</code></pre>&#x000A;&#x000A;<h2 id=".times-and-.each">.times and .each</h2>&#x000A;&#x000A;<p>The .times and .each methods are Ruby iterators, which means they perform an action a specified number of times.</p>&#x000A;&#x000A;<p>The .times iterator will perform the action passed to it by a block (see above) the number of times specified by the number on which .times is called.</p>&#x000A;&#x000A;<pre><code class="ruby">3.times { puts &quot;Chunky bacon!&quot; }&#x000A;# =&gt; Chunky bacon!&#x000A;# =&gt; Chunky bacon!&#x000A;# =&gt; Chunky bacon!&#x000A;</code></pre>&#x000A;&#x000A;<p>Example using .each&#x000A;The .each iterator will perform the action passed to it by a block for each element in the object on which .each is called.</p>&#x000A;&#x000A;<p>In this example, we&#39;re using a structure called a <strong>range</strong>, to describe a series of numbers from 1 to 10. Read more about <a href="http://www.tutorialspoint.com/ruby/ruby_ranges.htm">ranges</a>.</p>&#x000A;&#x000A;<pre><code class="ruby">one_to_ten = (1..10)&#x000A;&#x000A;one_to_ten.each do |num|&#x000A;  print (num**2).to_s + &quot; &quot;&#x000A;end&#x000A;1 4 9 16 25 36 49 64 81 100&#x000A;</code></pre>&#x000A;&#x000A;<h2 id="exercise-4">Exercise 4</h2>&#x000A;&#x000A;<p>Let&#39;s do our own Bitmaker Labs version of <a href="http://en.wikipedia.org/wiki/Fizz_buzz">FizzBuzz</a>, which is the name of a popular job interview coding problem.</p>&#x000A;&#x000A;<p>Write a program in a file called <strong>exercise4.rb</strong> that outputs the numbers from 1 to 100. For multiples of three, output &quot;Bit&quot; instead of the number and for multiples of five, output &quot;Maker&quot;. For numbers which are multiples of both three and five, output &quot;BitMaker&quot;.</p>&#x000A;&#x000A;<p>To solve this problem you will likely need to search the web. Start with the particular question you are looking for, something like &quot;how to check if a number is a multiple of another&quot;. <em>Do</em> use online resources, but <em>do not</em> read or copy an entire solution to the problem - make it your own.</p>&#x000A;&#x000A;<p>As always, don&#39;t forget to commit your work as you progress and push to github.</p>&#x000A;&#x000A;<p>Congrats for making it this far! You&#39;re done for today, but there&#39;s more to learn for <a href="http://alexa.bitmakerlabs.com/cohorts/10/assignments/218">tomorrow</a> :) </p>&#x000A;&#x000A;<h2 id="additional-resources">Additional Resources</h2>&#x000A;&#x000A;<ul>&#x000A;<li><a href="https://github.com/bitmakerlabs/resources/blob/master/finding_answers.md">Finding Answers with Google, Stack Overflow, etc.</a></li>&#x000A;</ul>
</div>

</article>

</main>
</body>
</html>
